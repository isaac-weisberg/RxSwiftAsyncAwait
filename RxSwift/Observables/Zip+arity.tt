//
//  Zip+arity.swift
//  RxSwift
//
//  Created by Krunoslav Zaher on 5/23/15.
//  Copyright Â© 2015 Krunoslav Zaher. All rights reserved.
//

<% for i in 2 ... 8 { %>

// <%= i %>

private enum Elem<%= i %><<%= (Array(1...i).map { "E\($0): Sendable" }).joined(separator: ", ") %>>: Sendable {
<%= (Array(1...i).map {
"    case e\($0)(E\($0))"
}).joined(separator: "\n") %>
}

extension ObservableType {
    /**
    Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.

    - seealso: [zip operator on reactivex.io](http://reactivex.io/documentation/operators/zip.html)

    - parameter resultSelector: Function to invoke for each series of elements at corresponding indexes in the sources.
    - returns: An observable sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    public static func zip<<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>>
        (
<%= (Array(1...i).map {
"           _ source\($0): O\($0)"
}).joined(separator: ",\n") %>,
            resultSelector: @escaping (
<%= (Array(1...i).map {
"               O\($0).Element"
}).joined(separator: ",\n") %>
            ) throws -> Element
        )
        -> Observable<Element> {
        
        typealias Elem = Elem<%=i%><<%= Array(1...i).map { "O\($0).Element" }.joined(separator: ", ") %>>

        return zip([
<%= (Array(1...i).map { idx in
"           source\(idx).thinMap(Elem.e\(idx)),"
}).joined(separator: "\n") %>
        ], resultSelector: { elems in
            if
<%= Array(1...i).map {
"                case .e\($0)(let e\($0)) = elems[\($0 - 1)]"
}.joined(separator: ",\n") %>
            {
                try resultSelector(<%= Array(1...i).map { "e\($0)" }.joined(separator: ", ")  %>)
            } else {
                fatalError()
            }
        })
    }
}

extension ObservableType {
    /**
    Merges the specified observable sequences into one observable sequence of tuples whenever all of the observable sequences have produced an element at a corresponding index.

    - seealso: [zip operator on reactivex.io](http://reactivex.io/documentation/operators/zip.html)

    - returns: An observable sequence containing the result of combining elements of the sources.
    */
    public static func zip<<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>>
        (<%= (Array(1...i).map { "_ source\($0): O\($0)" }).joined(separator: ", ") %>)
    -> Observable<(<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>)> where Element == (<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>) {
        zip(
<%= Array(1...i).map { idx in
"           source\(idx),"
}.joined(separator: "\n") %>
            resultSelector: { (<%= (Array(1...i).map { "$\($0 - 1)" }).joined(separator: ", ") %>) }
        )
    }
}

<% } %>
