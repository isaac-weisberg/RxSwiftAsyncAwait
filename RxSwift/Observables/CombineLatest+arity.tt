//
//  CombineLatest+arity.swift
//  RxSwift
//
//  Created by Krunoslav Zaher on 4/22/15.
//  Copyright Â© 2015 Krunoslav Zaher. All rights reserved.
//

<% for i in 2 ... 8 { %>

// <%= i %>

extension ObservableType {
    /**
    Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.

    - seealso: [combineLatest operator on reactivex.io](http://reactivex.io/documentation/operators/combinelatest.html)

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An observable sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    public static func combineLatest<<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>>
        (<%= (Array(1...i).map { "_ source\($0): O\($0)" }).joined(separator: ", ") %>, resultSelector: @escaping (<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>) throws -> Element) async
            -> Observable<Element> {
        return await CombineLatest<%= i %>(
            <%= (Array(1...i).map { "source\($0): source\($0)" }).joined(separator: ", ") %>,
            resultSelector: resultSelector
        )
    }
}

extension ObservableType where Element == Any {
    /**
    Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element.

    - seealso: [combineLatest operator on reactivex.io](http://reactivex.io/documentation/operators/combinelatest.html)

    - returns: An observable sequence containing the result of combining elements of the sources.
    */
    public static func combineLatest<<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>>
        (<%= (Array(1...i).map { "_ source\($0): O\($0)" }).joined(separator: ", ") %>) async
            -> Observable<(<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>)> {
        return await CombineLatest<%= i %>(
            <%= (Array(1...i).map { "source\($0): source\($0)" }).joined(separator: ", ") %>,
            resultSelector: { (<%= (Array(0..<i).map { "$\($0)" }).joined(separator: ", ") %>) }
        )
    }
}

final class CombineLatest<%= i %><<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>, Result> : Observable<Result> {
<%= (Array(1...i).map {
"    typealias E\($0) = O\($0).Element"
}).joined(separator: "\n") %>
    typealias ResultSelector = (<%= (Array(1...i).map { "E\($0)" }).joined(separator: ", ") %>) throws -> Result

    enum ParameterElement {
<%= (Array(1...i).map {
"         case e\($0)(E\($0))"
}).joined(separator: "\n") %>
    }

<%= (Array(1...i).map {
"    let source\($0): O\($0)"
}).joined(separator: "\n") %>

    let resultSelector: ResultSelector

    init(<%= (Array(1...i).map { "source\($0): O\($0)" }).joined(separator: ", ") %>, resultSelector: @escaping ResultSelector) async {
<%= (Array(1...i).map {
"        self.source\($0) = source\($0)"
}).joined(separator: "\n")  %>

        self.resultSelector = resultSelector
        await super.init()
    }

    override func subscribe<Observer: ObserverType>(_ c: C, _ observer: Observer) async -> AsynchronousDisposable where Observer.Element == Result {
        let sink = await CombineLatestCollectionTypeSink(
            parentSources: [
<%= Array(1...i).map {

"                source\($0).map { e\($0) in ParameterElement.e\($0)(e\($0)) }"
}.joined(separator: ",\n") %>
            ], resultSelector: { [resultSelector] coll in
                if
<%= Array(1...i).map {
"                    case .e\($0)(let e\($0)) = coll[\($0 - 1)]"
}.joined(separator: ",\n") %>
                {
                    let result = try resultSelector(
<%= Array(1...i).map {
"                        e\($0)"
}.joined(separator: ",\n") %>
                    )
                    return result
                }

                fatalError()
            },
            observer: observer
        )
        await sink.run(c.call())
        return sink
    }
}

<% } %>
